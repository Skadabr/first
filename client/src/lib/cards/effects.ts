//!
//! You need put `generated by effect action` which lead to "user interaction"
//! STRICTLY at the and of `allEffects` and such action should be THE ONLY ONE.
//!

import { unitAvailable } from "../../actions/battle/unit";
import { PLAYER_ADD_UNIT } from "../../actions/battle/player";

//
//          [ ]     action     [ ]
//                    |
//           v      \ v /       v
//                   |e|
//    pre: [a,a]     |f|      [a,a] :post
//                   |f|
//           v       |e|        v
//                   |c|
//    pre: [a,a,a,a] |t|      [a,a,a] :post
//                   |s|
//           v        |         v
//                    v
// [ ...preactions, action, ...postactions]
//

export function applyEffects(effects, action) {
  const [preActions, newAction, postActions] = effects.reduce(
    (allActions, eff) => applyEffect(eff, allActions),
    [[], action, []]
  );
  return [...preActions, newAction, ...postActions];
}

const MAKE_UNIT_AVAILABLE = "MAKE_UNIT_AVAILABLE";

//
// ============ reducer ============
//

export function applyEffect(effect, allActions) {
  switch (effect.type) {
    case MAKE_UNIT_AVAILABLE:
      return makeUnitAvailable(effect, allActions);
  }
}

function makeUnitAvailable(effect, allActions) {
  let [preActions, action, postActions] = allActions;
  const { type, payload } = action;

  if (action.type !== PLAYER_ADD_UNIT) return;

  postActions = [...postActions, unitAvailable(payload.unit)];

  return [preActions, action, postActions];
}

//
// ============ Effects ============
//

export function makeUnitAvailableEffect() {
  return {
    type: MAKE_UNIT_AVAILABLE
  };
}
